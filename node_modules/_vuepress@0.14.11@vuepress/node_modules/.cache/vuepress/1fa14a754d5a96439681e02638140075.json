{"remainingRequest":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-enum.md?vue&type=template&id=4eeb2f04&","dependencies":[{"path":"/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-enum.md","mtime":1559703812124},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"枚举\">枚举</h1>\n<p>枚举（Enum）类型用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>\n<hr>\n<h2 id=\"自动赋值\">自动赋值</h2>\n<p>枚举使用 <code>enum</code> 关键字来定义:</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat\n}\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>枚举成员会被赋值为从 <code>0</code> 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat\n}\n\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sun\"</span>] === <span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Mon\"</span>] === <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Tue\"</span>] === <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sat\"</span>] === <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// true</span>\n\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-string\">\"Sun\"</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">1</span>] === <span class=\"hljs-string\">\"Mon\"</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">2</span>] === <span class=\"hljs-string\">\"Tue\"</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">6</span>] === <span class=\"hljs-string\">\"Sat\"</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>事实上，上面的例子会被编译为：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> Days;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Days</span>) </span>{\n  Days[(Days[<span class=\"hljs-string\">\"Sun\"</span>] = <span class=\"hljs-number\">0</span>)] = <span class=\"hljs-string\">\"Sun\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Mon\"</span>] = <span class=\"hljs-number\">1</span>)] = <span class=\"hljs-string\">\"Mon\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Tue\"</span>] = <span class=\"hljs-number\">2</span>)] = <span class=\"hljs-string\">\"Tue\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Wed\"</span>] = <span class=\"hljs-number\">3</span>)] = <span class=\"hljs-string\">\"Wed\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Thu\"</span>] = <span class=\"hljs-number\">4</span>)] = <span class=\"hljs-string\">\"Thu\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Fri\"</span>] = <span class=\"hljs-number\">5</span>)] = <span class=\"hljs-string\">\"Fri\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Sat\"</span>] = <span class=\"hljs-number\">6</span>)] = <span class=\"hljs-string\">\"Sat\"</span>;\n})(Days || (Days = {}));\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"手动赋值\">手动赋值</h2>\n<p>我们也可以给枚举项手动赋值：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun = <span class=\"hljs-number\">7</span>,\n  Mon = <span class=\"hljs-number\">1</span>,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat\n}\n\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sun\"</span>] === <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Mon\"</span>] === <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Tue\"</span>] === <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sat\"</span>] === <span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>上面的例子中，未手动赋值的枚举项会接着上一个枚举项递增。</p>\n<p>如果未手动赋值的枚举项与手动赋值的重复了，TypeScript 是不会察觉到这一点的：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun = <span class=\"hljs-number\">3</span>,\n  Mon = <span class=\"hljs-number\">1</span>,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat\n}\n\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sun\"</span>] === <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Wed\"</span>] === <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">\"Sun\"</span>); <span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-number\">3</span>] === <span class=\"hljs-string\">\"Wed\"</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>上面的例子中，递增到 <code>3</code> 的时候与前面的 <code>Sun</code> 的取值重复了，但是 TypeScript 并没有报错，导致 <code>Days[3]</code> 的值先是 <code>&quot;Sun&quot;</code>，而后又被 <code>&quot;Wed&quot;</code> 覆盖了。编译的结果是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> Days;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Days</span>) </span>{\n  Days[(Days[<span class=\"hljs-string\">\"Sun\"</span>] = <span class=\"hljs-number\">3</span>)] = <span class=\"hljs-string\">\"Sun\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Mon\"</span>] = <span class=\"hljs-number\">1</span>)] = <span class=\"hljs-string\">\"Mon\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Tue\"</span>] = <span class=\"hljs-number\">2</span>)] = <span class=\"hljs-string\">\"Tue\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Wed\"</span>] = <span class=\"hljs-number\">3</span>)] = <span class=\"hljs-string\">\"Wed\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Thu\"</span>] = <span class=\"hljs-number\">4</span>)] = <span class=\"hljs-string\">\"Thu\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Fri\"</span>] = <span class=\"hljs-number\">5</span>)] = <span class=\"hljs-string\">\"Fri\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Sat\"</span>] = <span class=\"hljs-number\">6</span>)] = <span class=\"hljs-string\">\"Sat\"</span>;\n})(Days || (Days = {}));\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>所以使用的时候需要注意，最好不要出现这种覆盖的情况。</p>\n<p>手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的)：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun = <span class=\"hljs-number\">7</span>,\n  Mon,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat = &lt;<span class=\"hljs-built_in\">any</span>&gt;<span class=\"hljs-string\">\"S\"</span>\n}\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>编译后：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> Days;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">Days</span>) </span>{\n  Days[(Days[<span class=\"hljs-string\">\"Sun\"</span>] = <span class=\"hljs-number\">7</span>)] = <span class=\"hljs-string\">\"Sun\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Mon\"</span>] = <span class=\"hljs-number\">8</span>)] = <span class=\"hljs-string\">\"Mon\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Tue\"</span>] = <span class=\"hljs-number\">9</span>)] = <span class=\"hljs-string\">\"Tue\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Wed\"</span>] = <span class=\"hljs-number\">10</span>)] = <span class=\"hljs-string\">\"Wed\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Thu\"</span>] = <span class=\"hljs-number\">11</span>)] = <span class=\"hljs-string\">\"Thu\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Fri\"</span>] = <span class=\"hljs-number\">12</span>)] = <span class=\"hljs-string\">\"Fri\"</span>;\n  Days[(Days[<span class=\"hljs-string\">\"Sat\"</span>] = <span class=\"hljs-string\">\"S\"</span>)] = <span class=\"hljs-string\">\"Sat\"</span>;\n})(Days || (Days = {}));\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>当然，手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为 1：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Days {\n  Sun = <span class=\"hljs-number\">7</span>,\n  Mon = <span class=\"hljs-number\">1.5</span>,\n  Tue,\n  Wed,\n  Thu,\n  Fri,\n  Sat\n}\n\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sun\"</span>] === <span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Mon\"</span>] === <span class=\"hljs-number\">1.5</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Tue\"</span>] === <span class=\"hljs-number\">2.5</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"hljs-built_in\">console</span>.log(Days[<span class=\"hljs-string\">\"Sat\"</span>] === <span class=\"hljs-number\">6.5</span>); <span class=\"hljs-comment\">// true</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h1 id=\"字符串枚举\">字符串枚举</h1>\n<p>字符串枚举的概念很简单，但是有细微的运行时的差别。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Direction {\n    Up = <span class=\"hljs-string\">\"UP\"</span>,\n    Down = <span class=\"hljs-string\">\"DOWN\"</span>,\n    Left = <span class=\"hljs-string\">\"LEFT\"</span>,\n    Right = <span class=\"hljs-string\">\"RIGHT\"</span>,\n}\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"常数项和计算所得项\">常数项和计算所得项</h2>\n<p>枚举项有两种类型：常数项（constant member）和计算所得项（computed member）。</p>\n<p>前面我们所举的例子都是常数项，一个典型的计算所得项的例子：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red,\n  Green,\n  Blue = <span class=\"hljs-string\">\"blue\"</span>.length\n}\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>上面的例子中，<code>&quot;blue&quot;.length</code>就是一个计算所得项。</p>\n<p>上面的例子不会报错，但是<strong>如果紧接在计算所得项后面的是未手动赋值的项，那么它就会因为无法获得初始值而报错</strong></p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Color {\n  Red = <span class=\"hljs-string\">\"red\"</span>.length,\n  Green,\n  Blue\n}\n\n<span class=\"hljs-comment\">// index.ts(1,33): error TS1061: Enum member must have initializer.</span>\n<span class=\"hljs-comment\">// index.ts(1,40): error TS1061: Enum member must have initializer.</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"常数枚举\">常数枚举</h2>\n<p>常数枚举是使用 <code>const enum</code>定义的枚举类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">enum</span> Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\n<span class=\"hljs-keyword\">let</span> directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right\n];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>常数枚举与普通枚举的区别是，它会在编译阶段被删除，并且不能包含计算成员。</p>\n<p>上例的编译结果是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> directions = [<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* Up */</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* Down */</span>, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* Left */</span>, <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* Right */</span>];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>假如包含了计算成员，则会在编译阶段报错：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">enum</span> Color {\n  Red,\n  Green,\n  Blue = <span class=\"hljs-string\">\"blue\"</span>.length\n}\n\n<span class=\"hljs-comment\">// index.ts(1,38): error TS2474: In 'const' enum declarations member initializer must be constant expression.</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"外部枚举\">外部枚举</h2>\n<p>外部枚举（Ambient Enums）是使用 <code>declare enum</code> 定义的枚举类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">enum</span> Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\n<span class=\"hljs-keyword\">let</span> directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right\n];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p><code>declare</code> 定义的类型只会用于编译时的检查，编译结果中会被删除。</p>\n<p>上例的编译结果是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right\n];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>外部枚举与声明语句一样，常出现在声明文件中。</p>\n<p>同时使用 <code>declare</code> 和 <code>const</code> 也是可以的：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">declare</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">enum</span> Directions {\n  Up,\n  Down,\n  Left,\n  Right\n}\n\n<span class=\"hljs-keyword\">let</span> directions = [\n  Directions.Up,\n  Directions.Down,\n  Directions.Left,\n  Directions.Right\n];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>编译结果：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> directions = [<span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">/* Up */</span>, <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">/* Down */</span>, <span class=\"hljs-number\">2</span> <span class=\"hljs-comment\">/* Left */</span>, <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* Right */</span>];\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"反向映射\">反向映射</h2>\n<p>除了创建一个以属性名做为对象成员的对象之外，数字枚举成员还具有了反向映射，从枚举值到枚举名字。 例如，在下面的例子中：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">enum</span> Enum {\n    A\n}\n<span class=\"hljs-keyword\">let</span> a = Enum.A;\n<span class=\"hljs-keyword\">let</span> nameOfA = Enum[a]; <span class=\"hljs-comment\">// \"A\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>TypeScript可能会将这段代码编译为下面的JavaScript：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">var</span> Enum;\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Enum</span>) </span>{\n    Enum[Enum[<span class=\"hljs-string\">\"A\"</span>] = <span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">\"A\"</span>;\n})(Enum || (Enum = {}));\n<span class=\"hljs-keyword\">var</span> a = Enum.A;\n<span class=\"hljs-keyword\">var</span> nameOfA = Enum[a]; <span class=\"hljs-comment\">// \"A\"</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"></div><!--beforeend--></div><!--afterend--><p>生成的代码中，枚举类型被编译成一个对象，它包含了正向映射（<code>name -&gt; value）</code>和反向映射<code>（value -&gt; name）</code>。 引用枚举成员总会生成为对属性访问并且永远也不会内联代码。</p>\n<p><strong>要注意的是不会为字符串枚举成员生成反向映射。</strong></p>\n</div>\n",null]}