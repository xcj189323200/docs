{"remainingRequest":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-declare.md?vue&type=template&id=f713598a&","dependencies":[{"path":"/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-declare.md","mtime":1559646670070},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"声明文件\">声明文件</h1>\n<blockquote>\n<p>当使用第三方库时，我们需要引用它的声明文件，才能获得对应的代码补全、接口提示等功能。</p>\n</blockquote>\n<ul>\n<li>declare var 声明全局变量</li>\n<li>declare function 声明全局方法</li>\n<li>declare class 声明全局类</li>\n<li>declare enum 声明全局枚举类型</li>\n<li>declare namespace 声明（含有子属性的）全局对象</li>\n<li>interface 和 type 声明全局类型</li>\n<li>export 导出变量</li>\n<li>export namespace 导出（含有子属性的）对象</li>\n<li>export default ES6 默认导出</li>\n<li>export = commonjs 导出模块</li>\n<li>export as namespace UMD 库声明全局变量</li>\n<li>declare global 扩展全局变量</li>\n<li>declare module 扩展模块</li>\n</ul>\n<hr>\n<h2 id=\"什么是声明语句\">什么是声明语句</h2>\n<p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 <code>&lt;script&gt;</code> 标签引入 jQuery，然后就可以使用全局变量 <code>$</code> 或 <code>jQuery</code> 了。</p>\n<p>我们通常这样获取一个 <code>id</code> 是 <code>foo</code> 的元素：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ERROR: Cannot find name 'jQuery'.</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br></div><!--beforeend--></div><!--afterend--><p>这时，我们需要使用 <code>declare var</code> 来定义它的类型</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">jQuery</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>上例中，declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除。它编译结果是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>除了 <code>declare var</code> 之外，还有其他很多种声明语句，将会在后面详细介绍。</p>\n<h2 id=\"什么是声明文件\">什么是声明文件</h2>\n<p>通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中，这就是声明文件：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">jQuery</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><p>声明文件必需以 .d.ts 为后缀。</p>\n<p>一般来说，ts 会解析项目中所有的 _.ts 文件，当然也包含以 .d.ts 结尾的文件。所以当我们将 jQuery.d.ts 放到项目中时，其他所有 _.ts 文件就都可以获得 jQuery 的类型定义了。</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">//path/to/project</span>\n├── src\n<span class=\"token operator\">|</span>  ├── index<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span>  └── jQuery<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>ts\n└── tsconfig<span class=\"token punctuation\">.</span>json\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>假如仍然无法解析，那么可以检查下 tsconfig.json 中的 files、include 和 exclude 配置，确保其包含了 jQuery.d.ts 文件。</p>\n<p>这里只演示了全局变量这种模式的声明文件，假如是通过模块导入的方式使用第三方库的话，那么引入声明文件又是另一种方式了，将会在后面详细介绍。</p>\n<h2 id=\"第三方声明文件\">第三方声明文件</h2>\n<p>当然，jQuery 的声明文件不需要我们定义了，社区已经帮我们定义好了：<a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/jquery/index.d.ts\" target=\"_blank\" rel=\"noopener noreferrer\">jQuery in DefinitelyTyped<OutboundLink/></a>。</p>\n<p>我们可以直接下载下来使用，但是更推荐的是使用 @types 统一管理第三方库的声明文件。</p>\n<p><code>@types</code>的使用方式很简单，直接用 npm 安装对应的声明模块即可，以 jQuery 举例：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code>npm install @types<span class=\"token operator\">/</span>jquery <span class=\"token operator\">--</span>save<span class=\"token operator\">-</span>dev\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br></div><!--beforeend--></div><!--afterend--><p>可以在这个<a href=\"http://microsoft.github.io/TypeSearch/\" target=\"_blank\" rel=\"noopener noreferrer\">页面<OutboundLink/></a>搜索你需要的声明文件。</p>\n<h2 id=\"书写声明文件\">书写声明文件</h2>\n<p>当一个第三方库没有提供声明文件时，我们就需要自己书写声明文件了。前面只介绍了最简单的声明文件内容，而真正书写一个声明文件并不是一件简单的事，以下会详细介绍如何书写声明文件。</p>\n<p>在不同的场景下，声明文件的内容和使用方式会有所区别。</p>\n<p>库的使用场景主要有以下几种：</p>\n<ul>\n<li>全局变量：通过 <code>&lt;script&gt;</code> 标签引入第三方库，注入全局变量</li>\n<li>npm 包：通过 <code>import foo from 'foo'</code>导入，符合 ES6 模块规范</li>\n<li>UMD 库：既可以通过 <code>&lt;script&gt;</code> 标签引入，又可以通过 <code>import</code> 导入</li>\n<li>直接扩展全局变量：通过 <code>&lt;script&gt;</code> 标签引入后，改变一个全局变量的结构</li>\n<li>在 npm 包或 UMD 库中扩展全局变量：引用 npm 包或 UMD 库后，改变一个全局变量的结构</li>\n<li>模块插件：通过 <code>&lt;script&gt;</code> 或 <code>import</code> 导入后，改变另一个模块的结构</li>\n</ul>\n<h3 id=\"全局变量\">全局变量</h3>\n<p>全局变量是最简单的一种场景，之前举的例子就是通过 <code>&lt;script&gt;</code> 标签引入 jQuery，注入全局变量 <code>$</code> 和 <code>jQuery。</code></p>\n<p>使用全局变量的声明文件时，如果是以 npm install @types/xxx --save-dev 安装的，则不需要任何配置。如果是将声明文件直接存放于当前项目中，则建议和其他源码一起放到 src 目录下（或者对应的源码目录下）：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">//path/to/project</span>\n├── src\n<span class=\"token operator\">|</span>  ├── index<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span>  └── jQuery<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>ts\n└── tsconfig<span class=\"token punctuation\">.</span>json\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>如果没有生效，可以检查下 <code>tsconfig.json</code> 中的 <code>files</code>、<code>include</code> 和 <code>exclude</code> 配置，确保其包含了 <code>jQuery.d.ts</code> 文件。</p>\n<p>全局变量的声明文件主要有以下几种语法：</p>\n<ul>\n<li><code>declare var</code> 声明全局变量</li>\n<li><code>declare function</code> 声明全局方法</li>\n<li><code>declare class</code> 声明全局类</li>\n<li><code>declare enum</code> 声明全局枚举类型</li>\n<li><code>declare namespace</code> 声明（含有子属性的）全局对象</li>\n<li><code>interface</code> 和 <code>type</code> 声明全局类型</li>\n</ul>\n<h4 id=\"declare-var\"><code>declare var</code></h4>\n<p>在所有的声明语句中，<code>declare var</code> 是最简单的，如之前所学，它能够用来定义一个全局变量的类型。与其类似的，还有 <code>declare let</code> 和 <code>declare const</code>，使用 <code>let</code> 与使用 <code>var</code> 没有什么区别：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">jQuery</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 declare let 定义的 jQuery 类型，允许修改这个全局变量</span>\n<span class=\"token function-variable function\">jQuery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>而当我们使用 <code>const</code> 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">jQuery</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 使用 declare const 定义的 jQuery 类型，禁止修改这个全局变量</span>\n<span class=\"token function-variable function\">jQuery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ERROR: Cannot assign to 'jQuery' because it is a constant or a read-only property.</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>一般来说，全局变量都是禁止修改的常量，所以大部分情况都应该使用 <code>const</code> 而不是 <code>var</code> 或 <code>let</code>\n需要注意的是，声明语句中只能定义类型，切勿在声明语句中定义具体的实现：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">jQuery</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ERROR: An implementation cannot be declared in ambient contexts.</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"declare-function\"><code>declare function</code></h3>\n<p><code>declare function</code> 用来定义全局函数的类型。jQuery 其实就是一个函数，所以也可以用 function 来定义</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>在函数类型的声明语句中，函数重载也是支持的：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">domReadyCallback</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dom Ready!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"declare-class\"><code>declare class</code></h3>\n<p>当全局变量是一个类的时候，我们用 <code>declare class</code> 来定义它的类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/Animal.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p>同样的，<code>declare class</code> 语句也只能用来定义类型，不能用来定义具体的实现，比如定义 sayHi 方法的具体实现则会报错：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/Animal.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`My name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ERROR: An implementation cannot be declared in ambient contexts.</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"declare-enum\"><code>declare enum</code></h3>\n<p>使用 <code>declare enum</code> 定义的枚举类型也称作外部枚举（Ambient Enums），举例如下：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/Directions.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">let</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Directions<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Down<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Right\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>与其他全局变量的类型声明一致，<code>declare enum</code> 仅用来定义类型，而不是具体的值。</p>\n<p><code>Directions.d.ts</code>仅仅会用于编译时的检查，声明文件里的内容在编译结果中会被删除。它编译结果是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">var</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Directions<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Down<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Right\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>其中 <code>Directions</code> 是由第三方库定义好的全局变量。</p>\n<h3 id=\"declare-namespace\"><code>declare namespace</code></h3>\n<p><code>namespace</code> 是 ts 早期时为了解决模块化而创造的关键字，中文称为命名空间。\n由于历史遗留原因，在早期还没有 ES6 的时候，ts 提供了一种模块化方案，使用 <code>module</code> 关键字表示内部模块。但由于后来 ES6 也使用了 <code>module</code> 关键字，ts 为了兼容 ES6，使用 <code>namespace</code> 替代了自己的 <code>module</code>，更名为命名空间。</p>\n<p>随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的 <code>namespace</code>,而推荐使用 ES6 的模块化方案了，故我们不再需要学习 <code>namespace</code> 的使用了。\n<code>namespace</code> 被淘汰了，但是在声明文件中，<code>declare namespace</code> 还是比较常用的，它用来表示全局变量是一个对象，包含很多子属性。</p>\n<p>比如 <code>jQuery</code> 是一个全局变量，它是一个对象，提供了一个 <code>jQuery.ajax</code> 方法可以调用，那么我们就应该使用 <code>declare namespace jQuery</code> 来声明这个拥有多个子属性的全局变量。</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/get_something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>注意，在 <code>declare namespace</code> 内部，我们直接使用 <code>function ajax</code> 来声明函数，而不是使用 <code>declare function ajax</code>。类似的，也可以使用 <code>const</code>, <code>class</code>, <code>enum</code> 等语句</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> version<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Event</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">:</span> EventType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">enum</span> EventType <span class=\"token punctuation\">{</span>\n    CustomClick\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/get_something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">jQuery<span class=\"token punctuation\">.</span>Event</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ne<span class=\"token punctuation\">.</span><span class=\"token function\">blur</span><span class=\"token punctuation\">(</span>jQuery<span class=\"token punctuation\">.</span>EventType<span class=\"token punctuation\">.</span>CustomClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"嵌套的命名空间\">嵌套的命名空间</h3>\n<p>如果对象拥有深层的层级，则需要用嵌套的 namespace 来声明深层的属性的类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">namespace</span> fn <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/get_something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">check</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div><!--beforeend--></div><!--afterend--><p>假如 jQuery 下仅有 fn 这一个属性（没有 ajax 等其他属性或方法），则可以不需要嵌套 namespace:</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery<span class=\"token punctuation\">.</span>fn <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\njQuery<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">check</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p><code>interface</code> 和 <code>type</code></p>\n<p>除了全局变量之外，可能有一些类型我们也希望能暴露出来。在类型声明文件中，我们可以直接使用 <code>interface</code> 或 <code>type</code> 来声明一个全局的接口或类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">AjaxSettings</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n  data<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> AjaxSettings</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>这样的话，在其他文件中也可以使用这个接口或类型了：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">let</span> settings<span class=\"token punctuation\">:</span> AjaxSettings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/post_something\"</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p><code>type</code> 与 <code>interface</code> 类似，不再赘述。</p>\n<hr>\n<h3 id=\"防止命名冲突\">防止命名冲突</h3>\n<p>暴露在最外层的 interface 或 type 会作为全局类型作用于整个项目中，我们应该尽可能的减少全局变量或全局类型的数量。故最好将他们放到 namespace 下</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AjaxSettings</span> <span class=\"token punctuation\">{</span>\n    method<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> AjaxSettings</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>注意，在使用这个 <code>interface</code> 的时候，也应该加上 <code>jQuery</code> 前缀：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">let</span> settings<span class=\"token punctuation\">:</span> jQuery<span class=\"token punctuation\">.</span>AjaxSettings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token punctuation\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/post_something\"</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><hr>\n<h3 id=\"声明合并\">声明合并</h3>\n<p>假如 jQuery 既是一个函数，可以直接被调用 <code>jQuery('#foo')</code>，又是一个对象，拥有子属性 <code>jQuery.ajax()</code>（事实确实如此），那么我们可以组合多个声明语句，它们会不冲突的合并起来</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/jQuery.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">selector<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> jQuery <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> settings<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">jQuery</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\njQuery<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/api/get_something\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"npm-包\">npm 包</h2>\n<p>一般我们通过 <code>import foo from 'foo'</code> 导入一个 <code>npm</code> 包，这是符合 ES6 模块规范的。</p>\n<p>在我们尝试给一个 <code>npm</code> 包创建声明文件之前，需要先看看它的声明文件是否已经存在。一般来说，npm 包的声明文件可能存在于两个地方：</p>\n<ol>\n<li>与该 <code>npm</code> 包绑定在一起。判断依据是 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 <code>npm</code> 包的时候，最好也将声明文件与 <code>npm</code> 包绑定在一起。</li>\n<li>发布到 <code>@types</code> 里。我们只需要尝试安装一下对应的<code>@types</code> 包就知道是否存在该声明文件，安装命令是 <code>npm install @types/foo --save-dev</code>。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 <code>@types</code> 里了。</li>\n<li></li>\n</ol>\n<p>假如以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了。由于是通过 <code>import</code> 语句导入的模块，所以声明文件存放的位置也有所约束，一般有两种方案：</p>\n<p>创建一个 <code>node_modules/@types/foo/index.d.ts</code>文件，存放 <code>foo</code> 模块的声明文件。这种方式不需要额外的配置，但是 <code>node_modules</code> 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。</p>\n<p>创建一个 <code>types</code> 目录，专门用来管理自己写的声明文件，将 <code>foo</code> 的声明文件放到 <code>types/foo/index.d.ts</code> 中。这种方式需要配置下 <code>tsconfig.json</code> 中的 <code>paths</code> 和 <code>baseUrl</code> 字段。\n目录结构：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>project\n├── src\n<span class=\"token operator\">|</span>  └── index<span class=\"token punctuation\">.</span>ts\n├── types\n<span class=\"token operator\">|</span>  └── foo\n<span class=\"token operator\">|</span>     └── index<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>ts\n└── tsconfig<span class=\"token punctuation\">.</span>json\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>tsconfig.json 内容：</p>\n<!--beforebegin--><div class=\"language-json line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"types/*\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>如此配置之后，通过 <code>import</code> 导入 <code>foo</code> 的时候，也会去 <code>types</code> 目录下寻找对应的模块的声明文件了。</p>\n<p>注意 <code>module</code> 配置可以有很多种选项，不同的选项会影响模块的导入导出模式。这里我们使用了 <code>commonjs</code> 这个最常用的选项，后面的教程也都默认使用的这个选项。</p>\n<p>不管采用了以上两种方式中的哪一种，我都强烈建议大家将书写好的声明文件（通过给第三发库发 <code>pull request</code>，或者直接提交到 <code>@types</code> 里）发布到开源社区中，享受了这么多社区的优秀的资源，就应该在力所能及的时候给出一些回馈。只有所有人都参与进来，才能让 <code>ts</code> 社区更加繁荣。</p>\n<p><code>npm</code> 包的声明文件主要有以下几种语法：</p>\n<ul>\n<li>export 导出变量</li>\n<li>export namespace 导出（含有子属性的）对象</li>\n<li>export default ES6 默认导出</li>\n<li>export = commonjs 导出模块</li>\n</ul>\n<h3 id=\"export\">export</h3>\n<p><code>npm</code> 包的声明文件与全局变量的声明文件有很大区别。在 <code>npm</code> 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</p>\n<p><code>export</code> 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br><span class=\"line-number\">20</span><br><span class=\"line-number\">21</span><br></div><!--beforeend--></div><!--afterend--><p>对应的导入和使用模块应该是这样：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> getName<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">,</span> Directions<span class=\"token punctuation\">,</span> Options <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> myName <span class=\"token operator\">=</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> directions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  Directions<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Down<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Left<span class=\"token punctuation\">,</span>\n  Directions<span class=\"token punctuation\">.</span>Right\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> options<span class=\"token punctuation\">:</span> Options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"混用-declare-和-export\">混用 <code>declare</code> 和 <code>export</code></h3>\n<p>我们也可以使用 <code>declare</code> 先声明多个变量，最后再用 <code>export</code> 一次性导出。上例的声明文件可以等价的改写为：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> getName<span class=\"token punctuation\">,</span> Animal<span class=\"token punctuation\">,</span> Directions<span class=\"token punctuation\">,</span> Options <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div><!--beforeend--></div><!--afterend--><p>注意，与全局变量的声明文件类似,<code>interface</code> 前是不需要 <code>declare</code> 的。</p>\n<h3 id=\"export-default\">export default</h3>\n<p>在 ES6 模块系统中，使用 <code>export default</code> 可以导出一个默认值，使用方可以用 <code>import foo from 'foo'</code> 而不是 <code>import { foo } from 'foo'</code> 来导入这个默认值。\n在类型声明文件中，<code>export default</code> 用来导出默认值的类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br></div><!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">import</span> foo <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>注意，只有 <code>function、class</code> 和 <code>interface</code> 可以直接默认导出，其他的变量需要先定义出来，再默认导出：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ERROR: Expression expected.</span>\n    Up<span class=\"token punctuation\">,</span>\n    Down<span class=\"token punctuation\">,</span>\n    Left<span class=\"token punctuation\">,</span>\n    Right\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>上例中 <code>export default enum</code> 是错误的语法，需要使用 <code>declare enum</code> 定义出来，然后使用 <code>export default</code> 导出：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Directions<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p>针对这种默认导出，我们一般会将导出语句放在整个声明文件的最前面：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Directions<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">enum</span> Directions <span class=\"token punctuation\">{</span>\n  Up<span class=\"token punctuation\">,</span>\n  Down<span class=\"token punctuation\">,</span>\n  Left<span class=\"token punctuation\">,</span>\n  Right\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><h3 id=\"export-2\"><code>export =</code></h3>\n<p>在 <code>commonjs</code> 规范中，我们用以下方式来导出一个模块：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// 整体导出</span>\n<span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单个导出</span>\nexports<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是<code>const ... = require</code>：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// 整体导入</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单个导入</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>第二种方式是 <code>import ... from</code>，注意针对整体导出，需要使用 <code>import * as</code> 来导入：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// 整体导入</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> foo <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单个导入</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>第三种方式是 <code>import ... require</code>，这也是 ts 官方推荐的方式：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// 整体导入</span>\n<span class=\"token keyword\">import</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 单个导入</span>\n<span class=\"token keyword\">import</span> bar <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br></div><!--beforeend--></div><!--afterend--><p>对于这种使用 <code>commonjs</code> 规范的库，假如要为它写类型声明文件的话，就需要使用到 <code>export =</code> 这种语法了：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>需要注意的是，上例中使用了 <code>export =</code> 之后，就不能再单个导出 <code>export { bar }</code> 了。所以我们通过声明合并，使用 <code>declare namespace foo</code>来将 <code>bar</code> 合并到 <code>foo</code> 里。\n准确地讲，<code>export =</code> 不仅可以用在声明文件中，也可以用在普通的 ts 文件中。实际上，<code>import ... require</code> 和 <code>export =</code> 都是 ts 为了兼容 <code>AMD</code> 规范和 <code>commonjs</code> 规范而创立的新语法，由于并不常用也不推荐使用，所以这里就不详细介绍了，感兴趣的可以看<a href=\"https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档<OutboundLink/></a>。</p>\n<p>由于很多第三方库是 <code>commonjs</code> 规范的，所以声明文件也就不得不用到 <code>export =</code>这种语法了。但是还是需要再强调下，相比与 <code>export =</code>，我们更推荐使用 ES6 标准的 <code>export default</code> 和 <code>export。</code></p>\n<h2 id=\"umd-库\">UMD 库</h2>\n<p>既可以通过 <code>&lt;script&gt;</code>标签引入，又可以通过 <code>import</code> 导入的库，称为 <code>UMD</code> 库。相比于 <code>npm</code> 包的类型声明文件，我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法<code>export as namespace</code>。</p>\n<h3 id=\"export-as-namespace\">export as namespace</h3>\n<p>一般使用<code>export as namespace</code> 时，都是先有了 npm 包的声明文件，再基于它添加一条 <code>export as namespace</code> 语句，即可将声明好的一个变量声明为全局变量，举例如下:</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">namespace</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>当然它也可以与 export default 一起使用：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">namespace</span> foo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> foo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> foo <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"在-npm-包或-umd-库中扩展全局变量\">在 npm 包或 UMD 库中扩展全局变量</h2>\n<p>如之前所说，对于一个 <code>npm</code> 包或者 <code>UMD</code> 库的声明文件，只有 <code>export</code> 导出的类型声明才能被导入。所以对于 <code>npm</code> 包或 <code>UMD</code> 库，如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 <code>declare global</code>。</p>\n<h3 id=\"declare-global\"><code>declare global</code></h3>\n<p>使用<code>declare global</code>可以在 npm 包或者 UMD 库的声明文件中扩展全局变量的类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo/index.d.ts</span>\n\n<span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">String</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">prependHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">prependHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--><p><strong>注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。</strong></p>\n<h2 id=\"模块插件\">模块插件</h2>\n<p>有时通过 <code>import</code> 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。ts 提供了一个语法 <code>declare module</code>，它可以用来扩展原有模块的类型。</p>\n<h3 id=\"declare-module\"><code>declare module</code></h3>\n<p>如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 <code>declare module</code> 扩展原有模块：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/moment-plugin/index.d.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"moment\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> moment<span class=\"token punctuation\">.</span>CalendarKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"moment-plugin\"</span><span class=\"token punctuation\">;</span>\n\nmoment<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br></div><!--beforeend--></div><!--afterend--><p><code>declare module</code>也可用于在一个文件中一次性声明多个模块的类型:</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/foo-bar.d.ts</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"foo\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Foo</span> <span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"bar\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> bar <span class=\"token keyword\">from</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> f<span class=\"token punctuation\">:</span> Foo<span class=\"token punctuation\">;</span>\nbar<span class=\"token punctuation\">.</span><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div><!--beforeend--></div><!--afterend--><h2 id=\"声明文件中的依赖\">声明文件中的依赖</h2>\n<p>一个声明文件有时会依赖另一个声明文件中的类型，比如在前面的 <code>declare module</code> 的例子中，我们就在声明文件中导入了 <code>moment</code>，并且使用了 <code>moment.CalendarKey</code> 这个类型：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/moment-plugin/index.d.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">\"moment\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"moment\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> moment<span class=\"token punctuation\">.</span>CalendarKey<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>除了可以在声明文件中通过 <code>import</code> 导入另一个声明文件中的类型之外，还有一个语法也可以用来导入另一个声明文件，那就是三斜线指令。</p>\n<h2 id=\"三斜线指令\">三斜线指令</h2>\n<p>与 <code>namespace</code> 类似，三斜线指令也是 ts 在早期版本中为了描述模块之间的依赖关系而创造的语法。随着 ES6 的广泛应用，现在已经不建议再使用 ts 中的三斜线指令来声明模块之间的依赖关系了。</p>\n<p>但是在声明文件中，它还是有一定的用武之地。</p>\n<p>类似于声明文件中的 <code>import</code>,它可以用来导入另一个声明文件。与 <code>import</code> 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 <code>import</code>：</p>\n<ul>\n<li>当我们在书写一个全局变量的声明文件时</li>\n<li>当我们需要依赖一个全局变量的声明文件时</li>\n</ul>\n<h3 id=\"书写一个全局变量的声明文件\">书写一个全局变量的声明文件</h3>\n<p>这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 <code>import</code>, <code>export</code> 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/jquery-plugin/index.d.ts</span>\n\n<span class=\"token comment\">/// &lt;reference types=\"jquery\" /></span>\n\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token punctuation\">:</span> JQuery<span class=\"token punctuation\">.</span>AjaxSettings</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br></div><!--beforeend--></div><!--afterend--><p>三斜线指令的语法如上，<code>///</code> 后面使用 <code>xml</code> 的格式添加了对 <code>jquery</code> 类型的依赖，这样就可以在声明文件中使用 <code>JQuery.AjaxSettings</code> 类型了。</p>\n<p><strong>注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。</strong></p>\n<h3 id=\"依赖一个全局变量的声明文件\">依赖一个全局变量的声明文件</h3>\n<p>在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 <code>import</code> 导入，当然也就必须使用三斜线指令来引入了：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// types/node-plugin/index.d.ts</span>\n\n<span class=\"token comment\">/// &lt;reference types=\"node\" /></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">:</span> NodeJS<span class=\"token punctuation\">.</span>Process</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"node-plugin\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>global<span class=\"token punctuation\">.</span>process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br></div><!--beforeend--></div><!--afterend--><p>在上面的例子中，我们通过三斜线指引入了 <code>node</code> 的类型，然后在声明文件中使用了 <code>NodeJS.Process</code> 这个类型。最后在使用到 <code>foo</code> 的时候，传入了 node 中的全局变量 <code>process。</code></p>\n<p>由于引入的 node 中的类型都是全局变量的类型，它们是没有办法通过 <code>import</code> 来导入的，所以这种场景下也只能通过三斜线指令来引入了。</p>\n<p>以上两种使用场景下，都是由于需要书写或需要依赖全局变量的声明文件，所以必须使用三斜线指令。在其他的一些不是必要使用三斜线指令的情况下，就都需要使用 import 来导入。</p>\n<h3 id=\"拆分声明文件\">拆分声明文件</h3>\n<p>当我们的全局变量的声明文件太大时，可以通过拆分为多个文件，然后在一个入口文件中将它们一一引入，来提高代码的可维护性。比如 jQuery 的声明文件就是这样的：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// node_modules/@types/jquery/index.d.ts</span>\n\n<span class=\"token comment\">/// &lt;reference types=\"sizzle\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"JQueryStatic.d.ts\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"JQuery.d.ts\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"misc.d.ts\" /></span>\n<span class=\"token comment\">/// &lt;reference path=\"legacy.d.ts\" /></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">=</span> jQuery<span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br></div><!--beforeend--></div><!--afterend--><p>其中用到了 <code>types</code> 和 <code>path</code> 两种不同的指令。它们的区别是：types 用于声明对另一个库的依赖，而 <code>path</code> 用于声明对另一个文件的依赖。</p>\n<p>上例中，<code>sizzle</code> 是与 <code>jquery</code> 平行的另一个库，所以需要使用 <code>types=&quot;sizzle&quot;</code> 来声明对它的依赖。而其他的三斜线指令就是将 <code>jquery</code> 的声明拆分到不同的文件中了，然后在这个入口文件中使用 <code>path=&quot;foo&quot;</code> 将它们一一引入。</p>\n<h3 id=\"其他三斜线指令\">其他三斜线指令</h3>\n<p>除了这两种三斜线指令之外，还有其他的三斜线指令，比如<code>/// &lt;reference no-default-lib=&quot;true&quot;/&gt;</code>,<code>/// &lt;amd-module /&gt;</code>等，但它们都是废弃的语法，故这里就不介绍了，详情可见官网。</p>\n<h2 id=\"自动生成声明文件\">自动生成声明文件</h2>\n<p>如果库的源码本身就是由 ts 写的，那么在使用 tsc 脚本将 ts 编译为 js 的时候，添加 <code>declaration</code> 选项，就可以同时也生成 <code>.d.ts</code> 声明文件了。</p>\n<p>我们可以在命令行中添加 <code>--declaration</code>（简写 -d），或者在 <code>tsconfig.json</code> 中添加 <code>declaration</code> 选项。\n这里以 <code>tsconfig.json</code> 为例：</p>\n<!--beforebegin--><div class=\"language-json line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-json\"><code><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br></div><!--beforeend--></div><!--afterend--><p>上例中我们添加了 <code>outDir</code> 选项，将 ts 文件的编译结果输出到 <code>lib</code> 目录下，然后添加了 <code>declaration</code> 选项，设置为 <code>true</code>，表示将会由 ts 文件自动生成<code>.d.ts</code> 声明文件，也会输出到 <code>lib</code> 目录下。</p>\n<p>运行 <code>tsc</code> 之后，目录结构如下：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>project\n├── lib\n<span class=\"token operator\">|</span>  ├── bar\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  ├── index<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  └── index<span class=\"token punctuation\">.</span>js\n<span class=\"token operator\">|</span>  ├── index<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span>  └── index<span class=\"token punctuation\">.</span>js\n├── src\n<span class=\"token operator\">|</span>  ├── bar\n<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  └── index<span class=\"token punctuation\">.</span>ts\n<span class=\"token operator\">|</span>  └── index<span class=\"token punctuation\">.</span>ts\n├── <span class=\"token keyword\">package</span><span class=\"token punctuation\">.</span>json\n└── tsconfig<span class=\"token punctuation\">.</span>json\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br></div><!--beforeend--></div><!--afterend--><p>在这个例子中，<code>src</code>目录下有两个 ts 文件，分别是 <code>src/index.ts</code> 和 <code>src/bar/index.ts</code>，它们被编译到 lib 目录下的同时，也会生成对应的两个声明文件 <code>lib/index.d.ts</code> 和 <code>lib/bar/index.d.ts</code>。\n它们的内容分别是：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">// src/index.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./bar\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// src/bar/index.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// lib/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./bar\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// lib/bar/index.d.ts</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br><span class=\"line-number\">7</span><br><span class=\"line-number\">8</span><br><span class=\"line-number\">9</span><br><span class=\"line-number\">10</span><br><span class=\"line-number\">11</span><br><span class=\"line-number\">12</span><br><span class=\"line-number\">13</span><br><span class=\"line-number\">14</span><br><span class=\"line-number\">15</span><br><span class=\"line-number\">16</span><br><span class=\"line-number\">17</span><br><span class=\"line-number\">18</span><br><span class=\"line-number\">19</span><br></div><!--beforeend--></div><!--afterend--><p>可见，自动生成的声明文件基本保持了源码的结构，而将具体实现去掉了，生成了对应的类型声明。</p>\n<p>使用 <code>tsc</code> 自动生成声明文件时，每个 ts 文件都会对应一个 <code>.d.ts</code> 声明文件。这样的好处是，使用方不仅可以在使用 <code>import foo from 'foo'</code> 导入默认的模块时获得类型提示，还可以在使用 <code>import bar from 'foo/lib/bar'</code> 导入一个子模块时，也获得对应的类型提示。</p>\n<p>除了 <code>declaration</code> 选项之外，还有几个选项也与自动生成声明文件有关，这里只简单列举出来，不做详细演示了：</p>\n<ul>\n<li><code>declarationDir</code> 设置生成 <code>.d.ts</code> 文件的目录</li>\n<li><code>declarationMap</code> 对每个 <code>.d.ts</code> 文件，都生成对应的 <code>.d.ts.map（sourcemap）</code>文件</li>\n<li><code>emitDeclarationOnly</code> 仅生成 <code>.d.ts</code> 文件，不生成 <code>.js</code> 文件</li>\n</ul>\n<h2 id=\"发布声明文件\">发布声明文件</h2>\n<p>当我们为一个库写好了声明文件之后，下一步就是将它发布出去了。</p>\n<p>此时有两种方案：</p>\n<ol>\n<li>将声明文件和源码放在一起</li>\n<li>将声明文件发布到 @types 下</li>\n</ol>\n<p>这两种方案中优先选择第一种方案。保持声明文件与源码在一起，使用时就不需要额外增加单独的声明文件库的依赖了，而且也能保证声明文件的版本与源码的版本保持一致。</p>\n<p>仅当我们在给别人的仓库添加类型声明文件，但原作者不愿意合并 <code>pull request</code> 时，才需要使用第二种方案，将声明文件发布到 <code>@types</code> 下。</p>\n<h3 id=\"将声明文件和源码放在一起\">将声明文件和源码放在一起</h3>\n<p>如果声明文件是通过 tsc 自动生成的，那么无需做任何其他配置，只需要把编译好的文件也发布到 npm 上，使用方就可以获取到类型提示了。</p>\n<p>如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别：</p>\n<ul>\n<li>给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址</li>\n<li>在项目根目录下，编写一个 <code>index.d.ts</code> 文件</li>\n<li>针对入口文件（<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件），编写一个同名不同后缀的 <code>.d.ts</code> 文件</li>\n</ul>\n<p>第一种方式是给 <code>package.json</code> 中的 <code>types</code> 或 <code>typings</code> 字段指定一个类型声明文件地址。比如：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"lib/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"types\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo.d.ts\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br><span class=\"line-number\">6</span><br></div><!--beforeend--></div><!--afterend--><p>指定了 <code>types</code> 为 <code>foo.d.ts</code> 之后，导入此库的时候，就会去找 <code>foo.d.ts</code> 作为此库的类型声明文件了。</p>\n<p><code>typings</code> 与 <code>types</code> 一样，只是另一种写法。</p>\n<p>如果没有指定 <code>types</code> 或 <code>typings</code>,那么就会在根目录下寻找 <code>index.d.ts</code> 文件，将它视为此库的类型声明文件。</p>\n<p>如果没有找到 <code>index.d.ts</code> 文件，那么就会寻找入口文件（<code>package.json</code> 中的 <code>main</code> 字段指定的入口文件）是否存在对应同名不同后缀的 <code>.d.ts</code> 文件。</p>\n<p>比如 <code>package.json</code> 是这样时：</p>\n<!--beforebegin--><div class=\"language-ts line-numbers-mode\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token punctuation\">{</span>\n<span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"version\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">\"main\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"lib/index.js\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<div class=\"line-numbers-wrapper\"><span class=\"line-number\">1</span><br><span class=\"line-number\">2</span><br><span class=\"line-number\">3</span><br><span class=\"line-number\">4</span><br><span class=\"line-number\">5</span><br></div><!--beforeend--></div><!--afterend--><p>就会先识别 <code>package.json</code> 中是否存在 <code>types</code> 或 <code>typings</code> 字段。发现不存在，那么就会寻找是否存在 <code>index.d.ts</code> 文件。如果还是不存在，那么就会寻找是否存在 <code>lib/index.d.ts</code> 文件。假如说连 <code>lib/index.d.ts</code> 都不存在的话，就会被认为是一个没有提供类型声明文件的库了。</p>\n<p>有的库为了支持导入子模块，比如 <code>import bar from 'foo/lib/bar'</code>，就需要额外再编写一个类型声明文件 <code>lib/bar.d.ts</code> 或者 <code>lib/bar/index.d.ts</code>,这与自动生成声明文件类似，一个库中同时包含了多个类型声明文件。</p>\n<h3 id=\"将声明文件发布到-types-下\">将声明文件发布到<code>@types</code> 下</h3>\n<p>如果我们是在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request，那么就需要将声明文件发布到 <code>@types</code> 下。</p>\n<p>与普通的 npm 模块不同，<code>@types</code> 是统一由 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/\" target=\"_blank\" rel=\"noopener noreferrer\">DefinitelyTyped<OutboundLink/></a> 管理的。要将声明文件发布到 <code>@types</code> 下，就需要给 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/\" target=\"_blank\" rel=\"noopener noreferrer\">DefinitelyTyped<OutboundLink/></a> 创建一个 pull-request，其中包含了类型声明文件，测试代码，以及 <code>tsconfig.json</code> 等。</p>\n<p>pull-request 需要符合它们的规范，并且通过测试，才能被合并，稍后就会被自动发布到 @types 下。\n在 <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/\" target=\"_blank\" rel=\"noopener noreferrer\">DefinitelyTyped<OutboundLink/></a> 中创建一个新的类型声明，需要用到一些工具，DefinitelyTyped 的文档中已经有了详细的介绍，这里就不赘述了，以官方文档为准。</p>\n</div>\n",null]}