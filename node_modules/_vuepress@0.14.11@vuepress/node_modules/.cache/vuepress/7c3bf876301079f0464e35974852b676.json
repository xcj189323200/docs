{"remainingRequest":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js??ref--1-1!/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-interface-types.md?vue&type=template&id=1da177e0&","dependencies":[{"path":"/Users/xuchangjian/workspace/my/pc/docs/src/web/typescript/ts-interface-types.md","mtime":1559634470632},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_cache-loader@1.2.5@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vue-loader@15.7.0@vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xuchangjian/workspace/my/pc/docs/node_modules/_vuepress@0.14.11@vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"接口\">接口</h1>\n<h2 id=\"对象接口定义\">对象接口定义</h2>\n<p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p>\n<h2 id=\"什么是接口\">什么是接口</h2>\n<p>在面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p>\n<p>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</p>\n<hr>\n<p>简单的例子</p>\n<!--beforebegin--><div class=\"language-typescript extra-class\"><!--afterbegin--><pre v-pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面的例子中，我们定义了一个接口 Person，接着定义了一个变量 tom，它的类型是 Person。这样，我们就约束了 tom 的形状必须和接口 Person 一致。</p>\n<p>接口一般首字母大写。有的编程语言中会建议接口的名称加上 I 前缀。</p>\n<!--beforebegin--><div class=\"language-typescript extra-class\"><!--afterbegin--><pre v-pre class=\"language-typescript\"><code><span class=\"token comment\">//bad</span>\n<span class=\"token comment\">//定义的变量比接口少了一些属性是不允许的：</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(6,5): error TS2322: Type '{ name: string; }' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'age' is missing in type '{ name: string; }'.</span>\n\n<span class=\"token comment\">//多一些属性也是不允许的：</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>可见，<strong>赋值的时候，变量的形状必须和接口的形状保持一致。</strong></p>\n<hr>\n<h2 id=\"可选属性\">可选属性</h2>\n<p>有时我们希望不要完全匹配一个形状，那么可以用可选属性：</p>\n<!--beforebegin--><div class=\"language-typescript extra-class\"><!--afterbegin--><pre v-pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 或</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>可选属性的含义是该属性可以不存在。</p>\n<p>这时仍然不允许<strong>添加未定义的属性</strong>：</p>\n<!--beforebegin--><div class=\"language-typescript extra-class\"><!--afterbegin--><pre v-pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// examples/playground/index.ts(9,5): error TS2322: Type '{ name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Object literal may only specify known properties, and 'gender' does not exist in type 'Person'.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"任意属性\">任意属性</h2>\n<p>有时候我们希望一个接口允许有任意的属性，可以使用如下方式：</p>\n<!--beforebegin--><div class=\"language-typescript extra-class\"><!--afterbegin--><pre v-pre class=\"language-typescript\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>使用 [propName: string] 定义了任意属性取 string 类型的值。</p>\n<p>需要注意的是，<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(3,5): error TS2411: Property 'age' of type 'number' is not assignable to string index type 'string'.</span>\n<span class=\"token comment\">// index.ts(7,5): error TS2322: Type '{ [x: string]: string | number; name: string; age: number; gender: string; }' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Index signatures are incompatible.</span>\n<span class=\"token comment\">//     Type 'string | number' is not assignable to type 'string'.</span>\n<span class=\"token comment\">//       Type 'number' is not assignable to type 'string'.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上例中，任意属性的值允许是 string，但是可选属性 age 的值却是 number，number 不是 string 的子属性，所以报错了。</p>\n<p>另外，在报错信息中可以看出，此时 { name: 'Tom', age: 25, gender: 'male' } 的类型被推断成了 { [x: string]: string | number; name: string; age: number; gender: string; }，这是联合类型和接口的结合。</p>\n<p>如果想要使用 需要将属性值类型加上</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">//good</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  age<span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"只读属性\">只读属性</h2>\n<p>有时候我们希望对象中的一些字段只能在创建的时候被赋值，那么可以用 readonly 定义只读属性：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">//bad</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">9527</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(14,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上例中，使用 readonly 定义的属性 id 初始化后，又被赋值了，所以报错了。</p>\n<p><strong>注意，只读的约束存在于第一次给对象赋值的时候，而不是第一次给只读属性赋值的时候：</strong></p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token comment\">//bad</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> tom<span class=\"token punctuation\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span>\n  gender<span class=\"token punctuation\">:</span> <span class=\"token string\">\"male\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ntom<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token number\">89757</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.ts(8,5): error TS2322: Type '{ name: string; gender: string; }' is not assignable to type 'Person'.</span>\n<span class=\"token comment\">//   Property 'id' is missing in type '{ name: string; gender: string; }'.</span>\n<span class=\"token comment\">// index.ts(13,5): error TS2540: Cannot assign to 'id' because it is a constant or a read-only property.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上例中，报错信息有两处，第一处是在对 tom 进行赋值的时候，没有给 id 赋值。</p>\n<p>第二处是在给 tom.id 赋值的时候，由于它是只读属性，所以报错了。</p>\n<hr>\n<h2 id=\"类与接口定义\">类与接口定义</h2>\n<blockquote>\n<p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口，用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</p>\n</blockquote>\n<p>举个例子,一个动物类,动物都有嘴，并且可以叫。这时候有两个类，分别是猫类，狗类。继承与动物类，并实现接口<code>IMouth</code>,进而添加叫的方法</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMouth</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMouth</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMouth</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>一个类可以实现多个接口：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMouth</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEye</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">look</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMouth</span><span class=\"token punctuation\">,</span> IEye <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">look</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"look:I am a dog\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IMouth</span><span class=\"token punctuation\">,</span> IEye <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am a cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">look</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"look:I am a cat\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"接口继承接口\">接口继承接口</h2>\n<p>接口与接口之间可以是继承关系：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IMouth</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IEye</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">look</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPeople</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IEye</span><span class=\"token punctuation\">,</span> IMouth <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上例中，我们使用 <code>extends</code> 使 IPeople 继承 IEye, IMouth</p>\n<hr>\n<h2 id=\"接口继承类\">接口继承类</h2>\n<p>接口也可以继承类：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    x<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    y<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point3d</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span>\n    z<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> point3d<span class=\"token punctuation\">:</span> Point3d <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><hr>\n<h2 id=\"混合类型\">混合类型</h2>\n<p>可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchFunc</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> mySearch<span class=\"token punctuation\">:</span> SearchFunc<span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">mySearch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">source<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> subString<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>subString<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>有时候，一个函数还可以有自己的属性和方法：</p>\n<!--beforebegin--><div class=\"language-ts extra-class\"><!--afterbegin--><pre v-pre class=\"language-ts\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    interval<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Counter <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>Counter<span class=\"token operator\">></span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">start<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//需要类型断言下</span>\n    counter<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    counter<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">reset</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> counter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span>interval <span class=\"token operator\">=</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}